generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?

    image     String?
    imageUuid String?

    password String?

    music     String?
    musicUuid String?
    musicName String?

    bg     String?
    bgUuid String?

    accounts Account[]
    TodoList TodoList[]
    File     File[]
    Message  Message[]
}

model VerificationToken {
    token   String   @unique
    expires DateTime
    email   String
    id      String   @id @default(cuid())

    @@unique([email, token])
}

model TodoList {
    id      String  @id @default(cuid())
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String
    content String
    check   Boolean @default(false)
}

model File {
    id     String @id @default(cuid())
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    fileName    String
    fileUuid    String
    fileUrl     String
    isProcessed Boolean @default(false)
    vectorIndex String?

    uploadedAt     DateTime         @default(now())
    EmbeddingChunk EmbeddingChunk[]
}

model EmbeddingChunk {
    id     String @id @default(cuid())
    file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
    fileId String

    chunk  String
    vector Json
}

model Message {
    id String @id @default(cuid())

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    sender    String
    content   String
    createdAt DateTime @default(now())
}
